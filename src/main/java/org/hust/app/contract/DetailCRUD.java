package org.hust.app.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class DetailCRUD extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b506110016000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166356004b6a6040805190810160405280600681526020017f64657461696c00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016100fe9190610237565b602060405180830381600087803b15801561011857600080fd5b505af115801561012c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610150919081019061016a565b506102d8565b6000610162825161028a565b905092915050565b60006020828403121561017c57600080fd5b600061018a84828501610156565b91505092915050565b600061019e8261027f565b8084526101b2816020860160208601610294565b6101bb816102c7565b602085010191505092915050565b6000600482527f61747472000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f75696400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060608201905081810360008301526102518184610193565b9050818103602083015261026481610200565b90508181036040830152610277816101c9565b905092915050565b600081519050919050565b6000819050919050565b60005b838110156102b2578082015181840152602081019050610297565b838111156102c1576000848401525b50505050565b6000601f19601f8301169050919050565b6108d080620002e86000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306e63ff814610046575b600080fd5b34801561005257600080fd5b5061006d6004803603610068919081019061052f565b610083565b60405161007a9190610693565b60405180910390f35b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600681526020017f64657461696c00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161013491906106ae565b602060405180830381600087803b15801561014e57600080fd5b505af1158015610162573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061018691908101906104dd565b92508273ffffffffffffffffffffffffffffffffffffffff166313db93466040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156101ec57600080fd5b505af1158015610200573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061022491908101906104b4565b91508173ffffffffffffffffffffffffffffffffffffffff1663e942b516876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161027b9190610735565b600060405180830381600087803b15801561029557600080fd5b505af11580156102a9573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663e942b516866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103029190610700565b600060405180830381600087803b15801561031c57600080fd5b505af1158015610330573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166331afac3687846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161038b9291906106d0565b602060405180830381600087803b1580156103a557600080fd5b505af11580156103b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103dd9190810190610506565b90507fc57b01fa77f41df77eaab79a0e2623fab2e7ae3e9530d9b1cab225ad65f2b7ce8160405161040e9190610693565b60405180910390a180935050505092915050565b600061042e8251610803565b905092915050565b60006104428251610815565b905092915050565b60006104568251610827565b905092915050565b600082601f830112151561047157600080fd5b813561048461047f82610797565b61076a565b915080825260208301602083018583830111156104a057600080fd5b6104ab838284610843565b50505092915050565b6000602082840312156104c657600080fd5b60006104d484828501610422565b91505092915050565b6000602082840312156104ef57600080fd5b60006104fd84828501610436565b91505092915050565b60006020828403121561051857600080fd5b60006105268482850161044a565b91505092915050565b6000806040838503121561054257600080fd5b600083013567ffffffffffffffff81111561055c57600080fd5b6105688582860161045e565b925050602083013567ffffffffffffffff81111561058557600080fd5b6105918582860161045e565b9150509250929050565b6105a481610831565b82525050565b6105b3816107f9565b82525050565b60006105c4826107ce565b8084526105d8816020860160208601610852565b6105e181610885565b602085010191505092915050565b60006105fa826107c3565b80845261060e816020860160208601610852565b61061781610885565b602085010191505092915050565b6000600482527f61747472000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f75696400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006020820190506106a860008301846105aa565b92915050565b600060208201905081810360008301526106c881846105ef565b905092915050565b600060408201905081810360008301526106ea81856105b9565b90506106f9602083018461059b565b9392505050565b6000604082019050818103600083015261071981610625565b9050818103602083015261072d81846105b9565b905092915050565b6000604082019050818103600083015261074e8161065c565b9050818103602083015261076281846105b9565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561078d57600080fd5b8060405250919050565b600067ffffffffffffffff8211156107ae57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061080e826107d9565b9050919050565b6000610820826107d9565b9050919050565b6000819050919050565b600061083c826107d9565b9050919050565b82818337600083830152505050565b60005b83811015610870578082015181840152602081019050610855565b8381111561087f576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582088c13b03aae721573180d804b4d93010770d478bad7acd0befe1a2b285efcfb56c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405234801561001057600080fd5b506110016000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c92a78016040805190810160405280600681526020017f64657461696c00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016100fe9190610237565b602060405180830381600087803b15801561011857600080fd5b505af115801561012c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610150919081019061016a565b506102d8565b6000610162825161028a565b905092915050565b60006020828403121561017c57600080fd5b600061018a84828501610156565b91505092915050565b600061019e8261027f565b8084526101b2816020860160208601610294565b6101bb816102c7565b602085010191505092915050565b6000600382527f75696400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f61747472000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600060608201905081810360008301526102518184610193565b90508181036020830152610264816101c9565b9050818103604083015261027781610200565b905092915050565b600081519050919050565b6000819050919050565b60005b838110156102b2578082015181840152602081019050610297565b838111156102c1576000848401525b50505050565b6000601f19601f8301169050919050565b6108d080620002e86000396000f300608060405260043610610041576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063ce0a9fb914610046575b600080fd5b34801561005257600080fd5b5061006d6004803603610068919081019061052f565b610083565b60405161007a9190610693565b60405180910390f35b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600681526020017f64657461696c00000000000000000000000000000000000000000000000000008152506040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161013491906106ae565b602060405180830381600087803b15801561014e57600080fd5b505af1158015610162573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061018691908101906104dd565b92508273ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156101ec57600080fd5b505af1158015610200573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061022491908101906104b4565b91508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4876040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161027b9190610700565b600060405180830381600087803b15801561029557600080fd5b505af11580156102a9573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16631a391cb4866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103029190610735565b600060405180830381600087803b15801561031c57600080fd5b505af1158015610330573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16634c6f30c087846040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161038b9291906106d0565b602060405180830381600087803b1580156103a557600080fd5b505af11580156103b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103dd9190810190610506565b90507fdfc533ec2b52797a1229dc2495dbd3f4948f7c4c982ec077ad9d80810ec5c1f98160405161040e9190610693565b60405180910390a180935050505092915050565b600061042e8251610803565b905092915050565b60006104428251610815565b905092915050565b60006104568251610827565b905092915050565b600082601f830112151561047157600080fd5b813561048461047f82610797565b61076a565b915080825260208301602083018583830111156104a057600080fd5b6104ab838284610843565b50505092915050565b6000602082840312156104c657600080fd5b60006104d484828501610422565b91505092915050565b6000602082840312156104ef57600080fd5b60006104fd84828501610436565b91505092915050565b60006020828403121561051857600080fd5b60006105268482850161044a565b91505092915050565b6000806040838503121561054257600080fd5b600083013567ffffffffffffffff81111561055c57600080fd5b6105688582860161045e565b925050602083013567ffffffffffffffff81111561058557600080fd5b6105918582860161045e565b9150509250929050565b6105a481610831565b82525050565b6105b3816107f9565b82525050565b60006105c4826107ce565b8084526105d8816020860160208601610852565b6105e181610885565b602085010191505092915050565b60006105fa826107c3565b80845261060e816020860160208601610852565b61061781610885565b602085010191505092915050565b6000600382527f75696400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600482527f61747472000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006020820190506106a860008301846105aa565b92915050565b600060208201905081810360008301526106c881846105ef565b905092915050565b600060408201905081810360008301526106ea81856105b9565b90506106f9602083018461059b565b9392505050565b6000604082019050818103600083015261071981610625565b9050818103602083015261072d81846105b9565b905092915050565b6000604082019050818103600083015261074e8161065c565b9050818103602083015261076281846105b9565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561078d57600080fd5b8060405250919050565b600067ffffffffffffffff8211156107ae57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061080e826107d9565b9050919050565b6000610820826107d9565b9050919050565b6000819050919050565b600061083c826107d9565b9050919050565b82818337600083830152505050565b60005b83811015610870578082015181840152602081019050610855565b8381111561087f576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820ec02f88a556a637414892f364b851e288d0cb11e7c34a7ff02469a000dc910b56c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"uid\",\"type\":\"string\"},{\"name\":\"attr\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_INSERT = "insert";

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected DetailCRUD(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt insert(String uid, String attr) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(uid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(attr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] insert(String uid, String attr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(uid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(attr)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String uid, String attr) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(uid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(attr)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<InsertResultEventResponse> getInsertResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static DetailCRUD load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new DetailCRUD(contractAddress, client, credential);
    }

    public static DetailCRUD deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(DetailCRUD.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}

package org.hust.app.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class RecordCRUD extends Contract {
    public static final String[] BINARY_ARRAY = {"","fd5b505050506040513d601f19601f82011682018060405250610d2191908101906117ac565b90507f4b930e280fe29620bdff00c88155d46d6d82a39f45dd5c3ea114dc315735811281604051610d529190611ae6565b60405180910390a1809350505050919050565b6060806060600080600060608060606000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040805190810160405280600781526020017f7265636f726473000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610e229190611b01565b602060405180830381600087803b158015610e3c57600080fd5b505af1158015610e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610e749190810190611783565b97508773ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610eda57600080fd5b505af1158015610eee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f129190810190611708565b96508773ffffffffffffffffffffffffffffffffffffffff1663e8434e398d896040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f6b929190611b23565b602060405180830381600087803b158015610f8557600080fd5b505af1158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fbd9190810190611731565b95508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561102357600080fd5b505af1158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061105b91908101906117ac565b60405190808252806020026020018201604052801561108e57816020015b60608152602001906001900390816110795790505b5094508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156110f557600080fd5b505af1158015611109573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061112d91908101906117ac565b60405190808252806020026020018201604052801561116057816020015b606081526020019060019003908161114b5790505b5093508573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1580156111c757600080fd5b505af11580156111db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111ff91908101906117ac565b60405190808252806020026020018201604052801561123257816020015b606081526020019060019003908161121d5790505b509250600091505b8573ffffffffffffffffffffffffffffffffffffffff1663949d225d6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561129e57600080fd5b505af11580156112b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112d691908101906117ac565b8212156115e0578573ffffffffffffffffffffffffffffffffffffffff1663846719e0836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113329190611ae6565b602060405180830381600087803b15801561134c57600080fd5b505af1158015611360573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611384919081019061175a565b90508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113d990611c16565b600060405180830381600087803b1580156113f357600080fd5b505af1158015611407573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506114309190810190611816565b858381518110151561143e57fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161149e90611c6b565b600060405180830381600087803b1580156114b857600080fd5b505af11580156114cc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506114f59190810190611816565b848381518110151561150357fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639c981fcb6040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161156390611bc1565b600060405180830381600087803b15801561157d57600080fd5b505af1158015611591573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506115ba9190810190611816565b83838151811015156115c857fe5b9060200190602002018190525081600101915061123a565b8484849a509a509a5050505050505050509193909250565b60006116048251611d7e565b905092915050565b60006116188251611d90565b905092915050565b600061162c8251611da2565b905092915050565b60006116408251611db4565b905092915050565b60006116548251611dc6565b905092915050565b600082601f830112151561166f57600080fd5b813561168261167d82611ced565b611cc0565b9150808252602083016020830185838301111561169e57600080fd5b6116a9838284611df4565b50505092915050565b600082601f83011215156116c557600080fd5b81516116d86116d382611ced565b611cc0565b915080825260208301602083018583830111156116f457600080fd5b6116ff838284611e03565b50505092915050565b60006020828403121561171a57600080fd5b6000611728848285016115f8565b91505092915050565b60006020828403121561174357600080fd5b60006117518482850161160c565b91505092915050565b60006020828403121561176c57600080fd5b600061177a84828501611620565b91505092915050565b60006020828403121561179557600080fd5b60006117a384828501611634565b91505092915050565b6000602082840312156117be57600080fd5b60006117cc84828501611648565b91505092915050565b6000602082840312156117e757600080fd5b600082013567ffffffffffffffff81111561180157600080fd5b61180d8482850161165c565b91505092915050565b60006020828403121561182857600080fd5b600082015167ffffffffffffffff81111561184257600080fd5b61184e848285016116b2565b91505092915050565b60008060006060848603121561186c57600080fd5b600084013567ffffffffffffffff81111561188657600080fd5b6118928682870161165c565b935050602084013567ffffffffffffffff8111156118af57600080fd5b6118bb8682870161165c565b925050604084013567ffffffffffffffff8111156118d857600080fd5b6118e48682870161165c565b9150509250925092565b60006118f982611d26565b8084526020840193508360208202850161191285611d19565b60005b8481101561194b57838303885261192d8383516119bf565b925061193882611d47565b9150602088019750600181019050611915565b508196508694505050505092915050565b61196581611dd0565b82525050565b61197481611de2565b82525050565b61198381611d74565b82525050565b600061199482611d3c565b8084526119a8816020860160208601611e03565b6119b181611e36565b602085010191505092915050565b60006119ca82611d31565b8084526119de816020860160208601611e03565b6119e781611e36565b602085010191505092915050565b6000600682527f6c6f6361746500000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f6d61696e5f74785f6861736800000000000000000000000000000000000000006020830152604082019050919050565b6000600382527f75696400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152611ab481866118ee565b90508181036020830152611ac881856118ee565b90508181036040830152611adc81846118ee565b9050949350505050565b6000602082019050611afb600083018461197a565b92915050565b60006020820190508181036000830152611b1b81846119bf565b905092915050565b60006040820190508181036000830152611b3d8185611989565b9050611b4c602083018461195c565b9392505050565b60006040820190508181036000830152611b6d8185611989565b9050611b7c602083018461196b565b9392505050565b60006060820190508181036000830152611b9d8186611989565b9050611bac602083018561196b565b611bb9604083018461195c565b949350505050565b60006020820190508181036000830152611bda816119f5565b9050919050565b60006040820190508181036000830152611bfa816119f5565b90508181036020830152611c0e8184611989565b905092915050565b60006020820190508181036000830152611c2f81611a2c565b9050919050565b60006040820190508181036000830152611c4f81611a2c565b90508181036020830152611c638184611989565b905092915050565b60006020820190508181036000830152611c8481611a63565b9050919050565b60006040820190508181036000830152611ca481611a63565b90508181036020830152611cb88184611989565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611ce357600080fd5b8060405250919050565b600067ffffffffffffffff821115","611d0457600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611d8982611d54565b9050919050565b6000611d9b82611d54565b9050919050565b6000611dad82611d54565b9050919050565b6000611dbf82611d54565b9050919050565b6000819050919050565b6000611ddb82611d54565b9050919050565b6000611ded82611d54565b9050919050565b82818337600083830152505050565b60005b83811015611e21578082015181840152602081019050611e06565b83811115611e30576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058201e4c9ea1fb4c639513f15032a308f3e8b83e266f29accf3756bf05ecc241d05b6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","601f82011682018060405250610d149190810190611816565b8483815181101515610d2257fe5b906020019060200201819052508073ffffffffffffffffffffffffffffffffffffffff16639bca41e86040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610d8290611c16565b600060405180830381600087803b158015610d9c57600080fd5b505af1158015610db0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250610dd99190810190611816565b8383815181101515610de757fe5b90602001906020020181905250816001019150610a59565b8484849a509a509a5050505050505050509193909250565b6000806000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600781526020017f7265636f726473000000000000000000000000000000000000000000000000008152506040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610ec89190611b01565b602060405180830381600087803b158015610ee257600080fd5b505af1158015610ef6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610f1a9190810190611783565b92508273ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610f8057600080fd5b505af1158015610f94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fb89190810190611708565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5866040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161100f9190611c8b565b600060405180830381600087803b15801561102957600080fd5b505af115801561103d573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166309ff42f086846040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611098929190611b23565b602060405180830381600087803b1580156110b257600080fd5b505af11580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506110ea91908101906117ac565b90507fe7769b56c2afa8e40381956f76b91d9ec19c34c0a81791702fdcae68e35a72718160405161111b9190611ae6565b60405180910390a1809350505050919050565b60008060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040805190810160405280600781526020017f7265636f726473000000000000000000000000000000000000000000000000008152506040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016111e19190611b01565b602060405180830381600087803b1580156111fb57600080fd5b505af115801561120f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112339190810190611783565b93508373ffffffffffffffffffffffffffffffffffffffff16635887ab246040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561129957600080fd5b505af11580156112ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112d1919081019061175a565b92508273ffffffffffffffffffffffffffffffffffffffff16631a391cb4886040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113289190611be1565b600060405180830381600087803b15801561134257600080fd5b505af1158015611356573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff16631a391cb4876040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016113af9190611c36565b600060405180830381600087803b1580156113c957600080fd5b505af11580156113dd573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663c74f8caf6040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561144557600080fd5b505af1158015611459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061147d9190810190611708565b91508173ffffffffffffffffffffffffffffffffffffffff1663ae763db5896040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016114d49190611c8b565b600060405180830381600087803b1580156114ee57600080fd5b505af1158015611502573d6000803e3d6000fd5b505050508373ffffffffffffffffffffffffffffffffffffffff1663664b37d68985856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161155f93929190611b83565b602060405180830381600087803b15801561157957600080fd5b505af115801561158d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115b191908101906117ac565b90507fd72ab475a08df05fbd4f7f8cb4db1ad9dbdc26f54437fa6794acd97357779d2a816040516115e29190611ae6565b60405180910390a1809450505050509392505050565b60006116048251611d7e565b905092915050565b60006116188251611d90565b905092915050565b600061162c8251611da2565b905092915050565b60006116408251611db4565b905092915050565b60006116548251611dc6565b905092915050565b600082601f830112151561166f57600080fd5b813561168261167d82611ced565b611cc0565b9150808252602083016020830185838301111561169e57600080fd5b6116a9838284611df4565b50505092915050565b600082601f83011215156116c557600080fd5b81516116d86116d382611ced565b611cc0565b915080825260208301602083018583830111156116f457600080fd5b6116ff838284611e03565b50505092915050565b60006020828403121561171a57600080fd5b6000611728848285016115f8565b91505092915050565b60006020828403121561174357600080fd5b60006117518482850161160c565b91505092915050565b60006020828403121561176c57600080fd5b600061177a84828501611620565b91505092915050565b60006020828403121561179557600080fd5b60006117a384828501611634565b91505092915050565b6000602082840312156117be57600080fd5b60006117cc84828501611648565b91505092915050565b6000602082840312156117e757600080fd5b600082013567ffffffffffffffff81111561180157600080fd5b61180d8482850161165c565b91505092915050565b60006020828403121561182857600080fd5b600082015167ffffffffffffffff81111561184257600080fd5b61184e848285016116b2565b91505092915050565b60008060006060848603121561186c57600080fd5b600084013567ffffffffffffffff81111561188657600080fd5b6118928682870161165c565b935050602084013567ffffffffffffffff8111156118af57600080fd5b6118bb8682870161165c565b925050604084013567ffffffffffffffff8111156118d857600080fd5b6118e48682870161165c565b9150509250925092565b60006118f982611d26565b8084526020840193508360208202850161191285611d19565b60005b8481101561194b57838303885261192d8383516119bf565b925061193882611d47565b9150602088019750600181019050611915565b508196508694505050505092915050565b61196581611dd0565b82525050565b61197481611de2565b82525050565b61198381611d74565b82525050565b600061199482611d3c565b8084526119a8816020860160208601611e03565b6119b181611e36565b602085010191505092915050565b60006119ca82611d31565b8084526119de816020860160208601611e03565b6119e781611e36565b602085010191505092915050565b6000600382527f75696400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600682527f6c6f6361746500000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600c82527f6d61696e5f74785f6861736800000000000000000000000000000000000000006020830152604082019050919050565b60006060820190508181036000830152611ab481866118ee565b90508181036020830152611ac881856118ee565b90508181036040830152611adc81846118ee565b9050949350505050565b6000602082019050611afb600083018461197a565b92915050565b60006020820190508181036000830152611b1b81846119bf565b905092915050565b60006040820190508181036000830152611b3d8185611989565b9050611b4c602083018461195c565b9392505050565b60006040820190508181036000830152611b6d8185611989565b9050611b7c602083018461196b565b9392505050565b60006060820190508181036000830152611b9d8186611989565b9050611bac602083018561196b565b611bb9604083018461195c565b949350505050565b60006020820190508181036000830152611bda816119f5565b9050919050565b60006040820190508181036000830152611bfa816119f5565b90508181036020830152611c0e8184611989565b905092915050565b60006020820190508181036000830152611c2f81611a2c565b9050919050565b60006040820190508181036000830152611c4f81611a2c565b90508181036020830152611c638184611989565b905092915050565b60006020820190508181036000830152611c8481611a63565b9050919050565b60006040820190508181036000830152611ca481611a63565b90508181036020830152611cb88184611989565b905092915050565b6000604051905081810181811067ffffffffffffffff82111715611ce357600080fd5b8060405250919050565b600067ffffffffffffffff821115","611d0457600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611d8982611d54565b9050919050565b6000611d9b82611d54565b9050919050565b6000611dad82611d54565b9050919050565b6000611dbf82611d54565b9050919050565b6000819050919050565b6000611ddb82611d54565b9050919050565b6000611ded82611d54565b9050919050565b82818337600083830152505050565b60005b83811015611e21578082015181840152602081019050611e06565b83811115611e30576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820e70cc4489c6dab7978694ac450f8e8e282f53fd9faf890df4289a45522e0342d6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"main_tx_hash\",\"type\":\"string\"},{\"name\":\"uid\",\"type\":\"string\"},{\"name\":\"locate\",\"type\":\"string\"}],\"name\":\"insert\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_tx_hash\",\"type\":\"string\"},{\"name\":\"uid\",\"type\":\"string\"},{\"name\":\"locate\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"main_tx_hash\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"main_tx_hash\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"},{\"name\":\"\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"CreateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"InsertResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"UpdateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"count\",\"type\":\"int256\"}],\"name\":\"RemoveResult\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_UPDATE = "update";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_SELECT = "select";

    public static final Event CREATERESULT_EVENT = new Event("CreateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event INSERTRESULT_EVENT = new Event("InsertResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event UPDATERESULT_EVENT = new Event("UpdateResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    public static final Event REMOVERESULT_EVENT = new Event("RemoveResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
    ;

    protected RecordCRUD(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt insert(String main_tx_hash, String uid, String locate) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(main_tx_hash), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(uid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(locate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] insert(String main_tx_hash, String uid, String locate, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(main_tx_hash), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(uid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(locate)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsert(String main_tx_hash, String uid, String locate) {
        final Function function = new Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(main_tx_hash), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(uid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(locate)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getInsertInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getInsertOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt update(String main_tx_hash, String uid, String locate) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(main_tx_hash), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(uid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(locate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] update(String main_tx_hash, String uid, String locate, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(main_tx_hash), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(uid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(locate)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdate(String main_tx_hash, String uid, String locate) {
        final Function function = new Function(
                FUNC_UPDATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(main_tx_hash), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(uid), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(locate)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, String> getUpdateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getUpdateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt remove(String main_tx_hash) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(main_tx_hash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] remove(String main_tx_hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(main_tx_hash)), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String main_tx_hash) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(main_tx_hash)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple3<List<String>, List<String>, List<String>> select(String main_tx_hash) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(main_tx_hash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<List<String>, List<String>, List<String>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()));
    }

    public List<CreateResultEventResponse> getCreateResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATERESULT_EVENT, transactionReceipt);
        ArrayList<CreateResultEventResponse> responses = new ArrayList<CreateResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateResultEventResponse typedResponse = new CreateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<InsertResultEventResponse> getInsertResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRESULT_EVENT, transactionReceipt);
        ArrayList<InsertResultEventResponse> responses = new ArrayList<InsertResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertResultEventResponse typedResponse = new InsertResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateResultEventResponse> getUpdateResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERESULT_EVENT, transactionReceipt);
        ArrayList<UpdateResultEventResponse> responses = new ArrayList<UpdateResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateResultEventResponse typedResponse = new UpdateResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveResultEventResponse> getRemoveResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVERESULT_EVENT, transactionReceipt);
        ArrayList<RemoveResultEventResponse> responses = new ArrayList<RemoveResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveResultEventResponse typedResponse = new RemoveResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.count = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveResultEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveResultEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVERESULT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static RecordCRUD load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new RecordCRUD(contractAddress, client, credential);
    }

    public static RecordCRUD deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(RecordCRUD.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class CreateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class InsertResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class UpdateResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }

    public static class RemoveResultEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger count;
    }
}
